#!jinja2
{################################################################################}
{# BKG CONFIGURATIONS #}
{################################################################################}
{# Define the name of case study #}
{% set CSE_NME = 'valid_date_2022-12-28T00' %}

{# Configuration name including tunable parameters #}
{% set CTR_FLWS = 'ECMWF', 'GFS', 'GEFS' %}

{# Neighborhood widths for neighborhood methods, references model domains #}
{# with 1-1 correspondence looping in nesting order (d01, d02, d03...) #}
{# NOTE: this is impacted if WRF has been regridded to an intermediate grid #}
{% set INT_WDTHS = 3, 3, 3 %}

{################################################################################}
{# GRIDSTAT SETTINGS #}
{################################################################################}
{# Require all data, no missing files, TRUE or FALSE #}
{% set FULL_DATA = 'TRUE' %}

{# Define the observation / ground truth data type #}
{% set VRF_REF = 'StageIV' %}

{# Define the verification field #}
{% set VRF_FLD = 'QPF' %}

{# Subdirectory relative to control flow name to find ISO directories #}
{% set IN_STC_SUBDIR = 'Precip' %}

{# Subdirectory relative to ISO directories to find fields #}
{% set IN_DT_SUBDIR = '' %}

{# Specify thresholds levels for verification (NEEDS INTERNAL QUOTES "")#}
{% set CAT_THR='"[ >=1.0, >=10.0, >=25.0, >=50.0, >=100.0 ]"' %}

{# Neighborhood size for stats computation on observation grid #}
{% set NBRHD_WDTH = 9 %}

{# Verification region group name - used for mask list file name #}
{% set VRF_RGNS = 'CA_Climate_Zones' %}

{# Number of bootstrap resamplings, set 0 for off #}
{% set BTSTRP = 0 %}

{# Rank correlation computation flag, TRUE or FALSE #}
{% set RNK_CRR = 'FALSE' %}

{################################################################################}
{# CYCLING SETTINGS #}
{################################################################################}
{# First initial time for a forecast YYYY-MM-DDTHH #}
{% set CYC_STRT = '2022-12-23T00' %}

{# Last initial time for a forecast YYYY-MM-DDTHH #}
{% set CYC_STOP = '2022-12-27T00' %}

{# Interval between cycle start times hours INT #}
{% set CYC_INC = 24 %}

{# Define min / max forecast hours for ensemble products to be generated #}
{% set ANL_MIN = 24 %}
{% set ANL_MAX = 120 %}

{# Define the increment at which to generate cf outputs (HH) #}
{% set ANL_INC = 24 %}

{# OPTIONAL ARGUMENT to set a verification termination date -- preprocessing will #}
{# stop automatically at this valid date, define as blank string if unused #}
{% set EXP_VRF = '2022-12-28T00' %}

{# Compute precipitation accumulations from cf files, TRUE or FALSE #}
{% set CMP_ACC = 'TRUE' %}

{# Defines the min / max accumulation interval for precip #}
{% set ACC_MIN = 24 %}
{% set ACC_MAX = 24 %}

{# Defines the increment between min / max to compute accumulation intervals #}
{% set ACC_INC = 24 %}

{################################################################################}
{# JOB SETTINGS #}
{################################################################################}
{# Job mem argument #}
{% set GRD_PROC = 124 %}

{# Job mem argument #}
{% set GRD_MEM = '249208M' %}

{# Wallclock limit for ungrib jobs #}
{% set GRD_WC = 'PT1H' %}

{################################################################################}
{# CYLC SETTINGS #}
{################################################################################}
[scheduler]
    UTC mode = True
    allow implicit tasks = True
[scheduling]
    initial cycle point = {{CYC_STRT}}
    final cycle point = {{CYC_STOP}}
    [[graph]]
        PT{{CYC_INC}}H = """
        {# Loop model control flows #}
        {% for ctr_flw in CTR_FLWS %}
            {# inherit the max domain to process from 1-1 correspondence #}
            GridStat_{{ctr_flw}}
        {% endfor %}
        """

[runtime]
    [[root]]
        platform = {{environ['SCHED']}}
        [[[environment]]]
            OMP_NUM_THREADS = {{GRD_PROC}}
            FULL_DATA = {{FULL_DATA}}
            CMP_ACC = {{CMP_ACC}}
            ACC_MIN = {{ACC_MIN}}
            ACC_MAX = {{ACC_MAX}}
            ACC_INC = {{ACC_INC}}
            CYC_DT = $(isodatetime ${CYLC_TASK_CYCLE_POINT} --f '%Y%m%d%H')
            ANL_MIN = {{ANL_MIN}}
            ANL_MAX = {{ANL_MAX}}
            ANL_INC = {{ANL_INC}}
            {% if EXP_VRF == '' %}
                EXP_VRF = {{EXP_VRF}}
            {% else %}
                EXP_VRF = $(isodatetime {{EXP_VRF}} --f '%Y%m%d%H')
            {% endif %}
            VRF_REF = {{VRF_REF}}
            VRF_FLD = {{VRF_FLD}}
            CAT_THR = {{CAT_THR}}
            MSK_LST = {{environ['MSK_ROOT']}}/mask-lists/{{VRF_RGNS}}.txt
            NBRHD_WDTH = {{NBRHD_WDTH}}
            BTSTRP = {{BTSTRP}}
            RNK_CRR = {{RNK_CRR}}

    {# Loop model control flows #}
    {% for ctr_flw in CTR_FLWS %}
        {# Neighborhood width is in 1-1 correspondence with CTR_FLWS #}
        {% set int_wdth = INT_WDTHS[loop.index0] %}
            [[GridStat_{{ctr_flw}}]]
                execution time limit = {{GRD_WC}}
                script = {{environ['DRIVERS']}}/GridStat.sh
                execution retry delays = 3*PT5M
                [[[environment]]]
                    IF_ENS_PRD = 'FALSE'
                    CTR_FLW = {{ctr_flw}}
                    INT_WDTH = {{int_wdth}}
                    IN_DIR = {{environ['STC_ROOT']}}/{{ctr_flw}}/{{IN_STC_SUBDIR}}/$CYC_DT/{{IN_DT_SUBDIR}}
                    {# WRF workflow outputs are nested relative to ISO/mem_id by domain #}
                    WRK_DIR = {{environ['VRF_ROOT']}}/{{CSE_NME}}/{{ctr_flw}}/GridStat/{{VRF_REF}}/$CYC_DT
                [[[directives]]]
                    {% if environ['SCHED'] == 'slurm' %}
                        {% if environ['SYS_TYPE' ] == 'penguin' %}
                            --partition = general
                            --qos = {{environ['PART_DBG']}}
                            --nodes = 1
                            --ntasks-per-node = {{GRD_PROC}}
                        {% else %}
                            --partition = {{environ['PART_DBG']}}
                            --nodes = 1
                            --ntasks-per-node = {{GRD_PROC}}
                            --mem = {{GRD_MEM}}
                        {% endif %}
                    {% elif environ['SCHED'] == 'pbs' %}
                        -q = {{environ['PART_DBG']}}
                        -l select=1:mpiprocs={{GRD_PROC}}:ncpus=1
                    {% endif %}
    {% endfor %}
