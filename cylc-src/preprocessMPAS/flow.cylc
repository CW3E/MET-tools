#!jinja2
{################################################################################}
{# MPAS CONFIGURATIONS #}
{################################################################################}
{# Define the name of case study #}
{% set CSE_NME = 'valid_date_2022-12-28T00' %}

{# Configuration name including tunable parameters #}
{% set CTR_FLWS = 'MPAS_240-U', 'MPAS_240-U_LwrBnd' %}

{# Mesh information file names, must be in 1-1 correspondence with control flow names #}
{# if static information comes from separate stream #}
{% set MSH_NMES = 'MPAS_240-U.static.nc', 'MPAS_240-U_LwrBnd.static.nc' %}

{# MPAS output file prefix to source model outputs from, e.g., hist / diag #}
{% set MPAS_PRFX = 'history' %}

{# Define the ensemble size #}
{% set ENS_MAX = 6 %}

{# Define ensemble index prefix #}
{% set ENS_PFX = 'ens_' %}

{################################################################################}
{# CYCLING SETTINGS #}
{################################################################################}
{# First initial time for a forecast YYYY-MM-DDTHH #}
{% set CYC_STRT = '2022-12-23T00' %}

{# Last initial time for a forecast YYYY-MM-DDTHH #}
{% set CYC_STOP = '2022-12-27T00' %}

{# Interval between cycle start times PTXXH #}
{% set CYC_INC = 'PT24H' %}

{# Define min / max forecast hours for cf outputs to be generated #}
{% set ANL_MIN = '0' %}
{% set ANL_MAX = '120' %}

{# Define the increment at which to generate cf outputs (HH) #}
{% set ANL_INC = '24' %}

{# OPTIONAL ARGUMENT to set a verification termination date -- preprocessing will #}
{# stop automatically at this valid date, comment out this expression if not needed #}
{% set EXP_VRF = '2022-12-28T00' %}

{# Regrid to generic lat-lon for MET if native grid errors (TRUE or FALSE) #}
{% set RGRD = 'TRUE' %}

{# Compute precipitation accumulations from cf files, TRUE or FALSE #}
{% set CMP_ACC = 'TRUE' %}

{# Defines the min / max accumulation interval for precip #}
{% set ACC_MIN = '24' %}
{% set ACC_MAX = '72' %}

{# Defines the increment between min / max to compute accumulation intervals #}
{% set ACC_INC = '24' %}

{# Defines the offset to the initialization time in HH #}
{# Use to correct for the offset in start time / forecast hour due to a restart run #}
{# Needed for ingesting NetCDF meta-data in MET correctly #}
{% set INIT_OFFSET = '0' %}

{# Define the directory to find wrf outputs relative to ISO cycle directories #}
{% set IN_DT_SUBDIR = 'mpas_model' %}

{################################################################################}
{# JOB SETTINGS #}
{################################################################################}
{# ungrib mem argument #}
{% set PRE_MEM = '20000M' %}

{# Wallclock limit for ungrib jobs #}
{% set PRE_WC = 'PT30M' %}

{################################################################################}
{# CYLC SETTINGS #}
{################################################################################}
[scheduler]
    UTC mode = True
    allow implicit tasks = True
[scheduling]
    initial cycle point = {{CYC_STRT}}
    final cycle point = {{CYC_STOP}}
    [[graph]]
        {{CYC_INC}} = """
        {# Loop model control flows #}
        {% for ctr_flw in CTR_FLWS %}
            {# loop ensemble members to process #}
            {% for mem in range(0,ENS_MAX) %}
                {% set idx = mem | pad(2, '0') %}
                preprocess{{ctr_flw}}_ens_{{idx}}
            {% endfor %}
        {% endfor %}
        """

[runtime]
    [[root]]
        [[[environment]]]
            CNST = {{environ['DRIVERS']}}/CONSTANTS.sh
            CYC_DT = $(isodatetime ${CYLC_TASK_CYCLE_POINT} --f '%Y%m%d%H')
            STRT_DT = $CYC_DT
            ANL_MIN = {{ANL_MIN}}
            ANL_MAX = {{ANL_MAX}}
            ANL_INC = {{ANL_INC}}
            EXP_VRF = $(isodatetime {{EXP_VRF}} --f '%Y%m%d%H')
            RGRD = {{RGRD}}
            CMP_ACC = {{CMP_ACC}}
            ACC_MIN = {{ACC_MIN}}
            ACC_MAX = {{ACC_MIN}}
            ACC_INC = {{ACC_MIN}}
            MET = {{environ['MET']}}
            MET_TOOLS_PY = {{environ['MET_TOOLS_PY']}}
            UTLTY = {{environ['UTLTY']}}
            MPAS_PRFX = {{MPAS_PRFX}}

    {# Loop model control flows #}
    {% for ctr_flw in CTR_FLWS %}
        {# inherit the mesh name to process from 1-1 correspondence #}
        {% set msh_nme = MSH_NMES[loop.index0] %}
        {# loop ensemble members to process #}
        {% for mem in range(0,ENS_MAX) %}
            {% set idx = mem | pad(2, '0') %}
            [[preprocess{{ctr_flw}}_ens_{{idx}}]]
               platform = {{environ['SCHED']}}
               execution time limit = {{PRE_WC}}
               script = {{environ['DRIVERS']}}/run_preprocessMPAS.sh
               execution retry delays = 3*PT5M
               [[[environment]]]
                   CTR_FLW = {{ctr_flw}}
                   IN_DIR = {{environ['SIM_ROOT']}}/{{CSE_NME}}/{{ctr_flw}}/$CYC_DT/{{IN_DT_SUBDIR}}/{{ENS_PFX}}{{idx}}
                   WRK_DIR = {{environ['VRF_ROOT']}}/{{CSE_NME}}/{{ctr_flw}}/$CYC_DT/Preprocess/{{ENS_PFX}}{{idx}}
                   IN_MSH_DIR = {{environ['MSH_ROOT']}}/{{CSE_NME}}/{{ctr_flw}}/static
                   IN_MSH_F = {{msh_nme}}
               [[[directives]]]
                   {% if environ['SCHED'] == 'slurm' %}
                       {% if environ['SYS_TYPE' ] == 'penguin' %}
                           --partition = general
                           --qos = {{environ['PART_SRL']}}
                           --nodes = 1
                           --ntasks-per-node = 1
                       {% else %}
                           --partition = {{environ['PART_SRL']}}
                           --nodes = 1
                           --ntasks-per-node = 1
                           --mem = {{PRE_MEM}}
                       {% endif %}
                   {% elif environ['SCHED'] == 'pbs' %}
                       -q = {{environ['PART_SRL']}}
                       -l select=1:mpiprocs=1:ncpus=1
                   {% endif %}
        {% endfor %}
    {% endfor %}
