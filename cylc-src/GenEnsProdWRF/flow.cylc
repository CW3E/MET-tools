#!jinja2
{################################################################################}
{# WRF CONFIGURATIONS #}
{################################################################################}
{# Define the name of case study #}
{% set CSE_NME = 'valid_date_2022-12-28T00' %}

{# Configuration name including tunable parameters #}
{% set CTR_FLWS = 'WRF_9-3_WestCoast', 'WRF_9_WestCoast' %}

{# Max number of sub-domain to be processed, 1-1 correspondence with CTR_FLWS #}
{% set MAX_DOMS = 2, 1 %}

{# Neighborhood widths for neighborhood methods, references model domains #}
{# with 1-1 correspondence looping in nesting order (d01, d02, d03...) #}
{% set NBRHD_WDTHS = 3, 9 %}

{# Define the min / max ensemble indices #}
{% set ENS_MAX = '00' %}
{% set ENS_MAX = '05' %}

{# Define ensemble index prefix #}
{% set ENS_PRFX = 'ens_' %}

{# Define the number of digits to pad ensemble indices #}
{% set ENS_PAD = 2 %}

{# Define control member index, not to be used in ensemble spread calculation, #}
{# defined as empty string if not necessary #}
{% set CTR_MEM = '00' %}

{# Require all ensemble members, no missing files, TRUE or FALSE #}
{% set FULL_ENS = 'TRUE' %}

{# Define the verification field #}
{% set VRF_FLD = 'QPF' %}

{# Specify thresholds levels for verification #}
{% set CAT_THR='[ >0.0, >=10.0, >=25.0, >=50.0, > = 100.0 ]' %}

{################################################################################}
{# CYCLING SETTINGS #}
{################################################################################}
{# First initial time for a forecast YYYY-MM-DDTHH #}
{% set CYC_STRT = '2022-12-23T00' %}

{# Last initial time for a forecast YYYY-MM-DDTHH #}
{% set CYC_STOP = '2022-12-27T00' %}

{# Interval between cycle start times PTXXH #}
{% set CYC_INC = 'PT24H' %}

{# Define min / max forecast hours for cf outputs to be generated #}
{% set ANL_MIN = 0 %}
{% set ANL_MAX = 120 %}

{# Define the increment at which to generate cf outputs (HH) #}
{% set ANL_INC = 24 %}

{# OPTIONAL ARGUMENT to set a verification termination date -- preprocessing will #}
{# stop automatically at this valid date, comment out this expression if not needed #}
{% set EXP_VRF = '2022-12-28T00' %}

{# Compute precipitation accumulations from cf files, TRUE or FALSE #}
{% set CMP_ACC = 'TRUE' %}

{# Defines the min / max accumulation interval for precip #}
{% set ACC_MIN = 24 %}
{% set ACC_MAX = 72 %}

{# Defines the increment between min / max to compute accumulation intervals #}
{% set ACC_INC = 24 %}

{################################################################################}
{# JOB SETTINGS #}
{################################################################################}
{# Job mem argument #}
{% set ENS_MEM = '20000M' %}

{# Wallclock limit for ungrib jobs #}
{% set ENS_WC = 'PT1H' %}

{################################################################################}
{# CYLC SETTINGS #}
{################################################################################}
[scheduler]
    UTC mode = True
    allow implicit tasks = True
[scheduling]
    initial cycle point = {{CYC_STRT}}
    final cycle point = {{CYC_STOP}}
    [[graph]]
        {{CYC_INC}} = """
        {# Loop model control flows #}
        {% for ctr_flw in CTR_FLWS %}
            {# inherit the max domain to process from 1-1 correspondence #}
            {% set max_dom = MAX_DOMS[loop.index0] %}
            {# loop sub-domains to process #}
            {% for dom in range(0,max_dom) %}
                {% set grd = loop.index | pad(2, '0') %}
                {% set grd = ['d', grd] | join %}
                GenEnsProd_{{ctr_flw}}_{{grd}}
            {% endfor %}
        {% endfor %}
        """

[runtime]
    [[root]]
        [[[environment]]]
            CNST = {{environ['DRIVERS']}}/CONSTANTS.sh
            CYC_DT = $(isodatetime ${CYLC_TASK_CYCLE_POINT} --f '%Y%m%d%H')
            ANL_MIN = {{ANL_MIN}}
            ANL_MAX = {{ANL_MAX}}
            ANL_INC = {{ANL_INC}}
            {# EXP_VRF should be assigned as a blank string below if not used #}
            EXP_VRF = $(isodatetime {{EXP_VRF}} --f '%Y%m%d%H')
            RGRD = {{RGRD}}
            CMP_ACC = {{CMP_ACC}}
            ACC_MIN = {{ACC_MIN}}
            ACC_MAX = {{ACC_MIN}}
            ACC_INC = {{ACC_MIN}}
            ENS_PRFX = {{ENS_PRFX}}
            ENS_MIN = {{ENS_MIN}}
            ENS_MAX = {{ENS_MIN}}
            CTR_MEM = {{CTR_MEM}}
            VRF_FLD = {{VRF_FLD}}
            CAT_THR = {{CAT_THR}}
            MET = {{environ['MET']}}
            MET_TOOLS_PY = {{environ['MET_TOOLS_PY']}}
            UTLTY = {{environ['UTLTY']}}

    {# Loop model control flows #}
    {% for ctr_flw in CTR_FLWS %}
        {# inherit the max domain to process from 1-1 correspondence #}
        {% set max_dom = MAX_DOMS[loop.index0] %}
        {# loop sub-domains to process #}
        {% for dom in range(0,max_dom) %}
            {% set grd = loop.index | pad(2, '0') %}
            {% set grd = ['d', grd] | join %}
            {# Neighborhood width is in 1-1 correspondence with model grd #}
            {% set nbrhd_wdth = NBRHD_WDTHS[loop.index0] %}
            [[GenEnsProd_{{ctr_flw}}_{{grd}}]]
                platform = {{environ['SCHED']}}
                execution time limit = {{ENS_WC}}
                script = {{environ['DRIVERS']}}/run_GenEnsProd.sh
                execution retry delays = 3*PT5M
                [[[environment]]]
                    CTR_FLW = {{ctr_flw}}
                    NBRHD_WDTH = {{nbrhd_wdth}}
                    IN_DIR = {{environ['VRF_ROOT']}}/{{CSE_NME}}/{{ctr_flw}}/Preprocess/$CYC_DT
                    {# WRF preprocessed outputs are nested relative to ISO/mem_id by domain #}
                    IN_DT_SUBDIR = {{grd}}
                    WRK_DIR = {{environ['VRF_ROOT']}}/{{CSE_NME}}/{{ctr_flw}}/GenEnsProd/$CYC_DT
                [[[directives]]]
                    {% if environ['SCHED'] == 'slurm' %}
                        {% if environ['SYS_TYPE' ] == 'penguin' %}
                            --partition = general
                            --qos = {{environ['PART_SRL']}}
                            --nodes = 1
                            --ntasks-per-node = 1
                        {% else %}
                            --partition = {{environ['PART_SRL']}}
                            --nodes = 1
                            --ntasks-per-node = 1
                            --mem = {{ENS_MEM}}
                        {% endif %}
                    {% elif environ['SCHED'] == 'pbs' %}
                        -q = {{environ['PART_SRL']}}
                        -l select=1:mpiprocs=1:ncpus=1
                    {% endif %}
        {% endfor %}
    {% endfor %}
