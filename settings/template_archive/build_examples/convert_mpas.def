Bootstrap: docker
From: ubuntu:22.04 

%labels
    APPLICATION_NAME convert_mpas - Ubuntu 2022.04
    APPLICATION_URL 
    APPLICATION_VERSION 1.1

    AUTHOR_NAME Colin Grudzien
    AUTHOR_EMAIL cgrudzien@ucsd.edu

    CO_AUTHOR_NAME Jozette Conti
    CO_AUTHOR_EMAIL jlconti@ucsd.edu

    CO_AUTHOR_NAME Patrick Mulrooney
    CO_AUTHOR_EMAIL pmulrooney@ucsd.edu

    LAST_UPDATED 2024.10.15

%files

%environment

%post -c /bin/bash
    # run verbose
    set -x

    # Create minimal environment for the container installation
    apt-get update
    apt-get -y install build-essential
    apt-get -y install vim
    apt-get -y install wget
    apt-get -y install unzip
    apt-get -y install make
    apt-get -y install curl
    apt-get -y install libcurl4-gnutls-dev
    apt-get -y install libxml2-dev
    apt-get -y install m4
    apt-get -y install gawk
    apt-get -y install valgrind

    # all libaries will be installed to /usr/local
    export PREFIX="/usr/local"
    export LD_LIBRARY_PATH="${PREFIX}/lib:${LD_LIBRARY_PATH}"
    export CPPFLAGS="-I${PREFIX}/include"
    export LDFLAGS="-L${PREFIX}/lib"

    # Intel compilers are used to compile all libs
    wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \
    | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
    echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list
    apt-get update
    apt-get -y install intel-basekit
    apt-get -y install intel-hpckit
    . /opt/intel/oneapi/setvars.sh 
    export CC="icx"
    export FC="ifx"
    export F77="ifx"

    # move to PREFIX and download ZLIB
    cd ${PREFIX}
    wget https://www.zlib.net/zlib-1.3.1.tar.gz
    zlib_sha=9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23
    echo "${zlib_sha} zlib-1.3.1.tar.gz" > zlib-1.3.1.tar.gz.sha256
    sha256sum --strict --status -c zlib-1.3.1.tar.gz.sha256
    error=$?
    if [ ${error} -ne 0 ]; then
      exit ${error}
    fi
    tar -xvf zlib-1.3.1.tar.gz
    rm -f zlib-1.3.1.tar.gz
    rm -f zlib-1.3.1.tar.gz.sha256

    # configure / build ZLIB
    cd zlib-1.3.1
    make distclean
    ./configure --prefix=${PREFIX}
    make check install

    # return to PREFIX and download HDF5
    cd ${PREFIX}
    wget https://github.com/HDFGroup/hdf5/releases/download/hdf5-1_10_11/hdf5-1_10_11.tar.gz
    tar -xvf hdf5-1_10_11.tar.gz
    mv hdfsrc hdf5-1.10.11
    rm -f hdf5-1_10_11.tar.gz

    # configure / build HDF5
    cd hdf5-1.10.11
    ./configure --with-zlib=${PREFIX} --prefix=${PREFIX} --enable-fortran --enable-shared
    make check install

    # return to PREFIX and download NetCDF C libs
    cd ${PREFIX}
    wget https://github.com/Unidata/netcdf-c/archive/refs/tags/v4.9.2.tar.gz
    tar -xvf v4.9.2.tar.gz
    rm -f v4.9.2.tar.gz

    # configure / build NetCDF4 C libs 
    cd netcdf-c-4.9.2
    ./configure --prefix=${PREFIX} --enable-netcdf4 --enable-shared
    make check install 

    # return to PREFIX and download NetCDF F libs
    cd ${PREFIX}
    wget https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v4.6.1.tar.gz
    tar -xvf v4.6.1.tar.gz
    rm -f v4.6.1.tar.gz
   
    # configure and build NetCDF F libs
    cd netcdf-fortran-4.6.1
    ./configure --prefix=${PREFIX} --enable-shared
    make check install

    # build convert_mpas on top of software stack
    cd /opt
    wget https://github.com/mgduda/convert_mpas/archive/refs/heads/master.zip
    unzip master.zip
    rm -f master.zip
    cd convert_mpas-master
    make

    # make netcdf shared libraries available at startup
    LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"
    echo "export LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}\"" >> $SINGULARITY_ENVIRONMENT

    # easy call of convert_mpas executable
    PATH="/opt/convert_mpas-master:${PATH}"
    echo "export PATH=\"${PATH}\"" >> $SINGULARITY_ENVIRONMENT

%test
